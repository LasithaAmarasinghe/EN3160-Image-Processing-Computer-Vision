# Define the convolution function
def convolution2d(image, kernel):
    m, n = kernel.shape
    if m == n:
        y, x = image.shape
        y = y - m + 1
        x = x - m + 1
        new_image = np.zeros((y, x))
        for i in range(y):
            for j in range(x):
                new_image[i][j] = np.sum(image[i:i+m, j:j+m] * kernel)
    return new_image

# Read the image
img = cv.imread('images/einstein.png', cv.IMREAD_GRAYSCALE).astype(np.float32)
rows, cols = img.shape[0], img.shape[1]

# Define Sobel kernels
sobel_v = np.array([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype='float')
sobel_h = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype='float')

# Pad the image
padded = np.zeros((rows + 2, cols + 2))
for i in range(rows):
    for j in range(cols):
        padded[i + 1, j + 1] = img[i, j]

# Apply convolution
grad_x = convolution2d(padded, sobel_v)
grad_y = convolution2d(padded, sobel_h)
grad = np.sqrt(grad_x**2 + grad_y**2)

# Plot the results
fig,axes = plt.subplots(1,4, sharex=True, sharey=True, figsize=(12,3))
axes[0].imshow(img, cmap='gray', vmin=0, vmax=255)
axes[0].set_title('Original')
axes[0].axis('off')

axes[1].imshow(grad_x, cmap='gray', vmin=-1020, vmax=1020)
axes[1].set_title('Sobel vertical')
axes[1].axis('off')

axes[2].imshow(grad_y, cmap='gray', vmin=-1020, vmax=1020)
axes[2].set_title('Sobel horizonatal')
axes[2].axis('off')

axes[3].imshow(grad, cmap='gray', vmin=-1020, vmax=1020)
axes[3].set_title('Gradiant magnitude')
axes[3].axis('off')

plt.show()
