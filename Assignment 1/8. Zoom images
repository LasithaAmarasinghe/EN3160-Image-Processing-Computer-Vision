import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt

# Function to zoom the image using nearest-neighbor interpolation
def nearest_neighbor_zoom(image, zoom_factor):
    height, width = image.shape[:2]
    new_height, new_width = int(height * zoom_factor), int(width * zoom_factor)
    
    # Create an empty zoomed image
    zoomed_image = np.zeros((new_height, new_width, image.shape[2]), dtype=image.dtype)
    
    for i in range(new_height):
        for j in range(new_width):
            # Map back to original image coordinates
            orig_x = int(i / zoom_factor)
            orig_y = int(j / zoom_factor)
            zoomed_image[i, j] = image[orig_x, orig_y]
    
    return zoomed_image

# Function to zoom the image using bilinear interpolation
def bilinear_zoom(image, zoom_factor):
    height, width = image.shape[:2]
    new_height, new_width = int(height * zoom_factor), int(width * zoom_factor)
    
    # Create an empty zoomed image
    zoomed_image = np.zeros((new_height, new_width, image.shape[2]), dtype=image.dtype)
    
    for i in range(new_height):
        for j in range(new_width):
            # Map back to original image coordinates
            x = i / zoom_factor
            y = j / zoom_factor
            
            # Get the coordinates of the four nearest pixels
            x1, y1 = int(x), int(y)
            x2, y2 = min(x1 + 1, height - 1), min(y1 + 1, width - 1)
            
            # Calculate the fractional parts
            dx, dy = x - x1, y - y1
            
            # Perform bilinear interpolation
            zoomed_image[i, j] = (image[x1, y1] * (1 - dx) * (1 - dy) +
                                  image[x1, y2] * (1 - dx) * dy +
                                  image[x2, y1] * dx * (1 - dy) +
                                  image[x2, y2] * dx * dy)
    
    return zoomed_image


# Read the original images
img1 = cv.imread('images/im01small.png')
assert img1 is not None, "Image not found!"

img2 = cv.imread('images/im02small.png')
assert img2 is not None, "Image not found!"

img3 = cv.imread('images/im03small.png')
assert img3 is not None, "Image not found!"

img4 = cv.imread('images/im04small.jpg')
assert img4 is not None, "Image not found!"

for i in [img1, img2, img3, img4]:
    img = i
    
    # Set the zoom factor
    zoom_factor = 2.0  

    # Perform nearest-neighbor zoom
    zoomed_nearest = nearest_neighbor_zoom(img, zoom_factor)

    # Perform bilinear interpolation zoom
    zoomed_bilinear = bilinear_zoom(img, zoom_factor)

    # Display the original and zoomed images
    fig, axs = plt.subplots(1, 3, figsize=(15, 5))

    axs[0].imshow(cv.cvtColor(img, cv.COLOR_BGR2RGB))
    axs[0].set_title('Original Image')
    axs[0].axis('off')

    axs[1].imshow(cv.cvtColor(zoomed_nearest, cv.COLOR_BGR2RGB))
    axs[1].set_title('Nearest-Neighbor Zoom')
    axs[1].axis('off')

    axs[2].imshow(cv.cvtColor(zoomed_bilinear, cv.COLOR_BGR2RGB))
    axs[2].set_title('Bilinear Interpolation Zoom')
    axs[2].axis('off')

    plt.show()


